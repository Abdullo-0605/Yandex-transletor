{"ast":null,"code":"var _jsxFileName = \"/home/abdullokhodjimatov95/ibs-school/react/lesson-59/yandex-dictionary-master/src/components/Input/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button, Cite, InputBox, Select, Textarea, TrFromToBox } from \"./styles\";\nimport { ReactComponent as ArrowRight } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/icons/arrow-right-solid.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Input({\n  getTranslatedWords\n}) {\n  _s();\n\n  const [inputText, setInputText] = useState('');\n  const langs = [\"ru-ru\", \"ru-en\", \"ru-pl\", \"ru-uk\", \"ru-de\", \"ru-fr\", \"ru-es\", \"ru-it\", \"ru-tr\", \"en-ru\", \"en-en\", \"en-de\", \"en-fr\", \"en-es\", \"en-it\", \"en-tr\", \"pl-ru\", \"uk-ru\", \"de-ru\", \"de-en\", \"fr-ru\", \"fr-en\", \"es-ru\", \"es-en\", \"it-ru\", \"it-en\", \"tr-ru\", \"tr-en\"];\n\n  const langToStr = lang => {\n    switch (lang) {\n      case \"ru\":\n        return \"Russian\";\n\n      case \"en\":\n        return \"English\";\n\n      case \"pl\":\n        return \"Polandish\";\n\n      case \"uk\":\n        return \"Ukrainian\";\n\n      case \"de\":\n        return \"German\";\n\n      case \"fr\":\n        return \"French\";\n\n      case \"es\":\n        return \"Spanish\";\n\n      case \"it\":\n        return \"Italian\";\n\n      case \"tr\":\n        return \"Turkish\";\n\n      default:\n        return '';\n    }\n  };\n\n  const langsText = (langs, number) => {\n    const lang = langs.split(\"-\");\n    return langToStr(lang[number]);\n  };\n\n  const [chosenLang, setChosenLang] = useState(\"en-ru\");\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(InputBox, {\n      children: [/*#__PURE__*/_jsxDEV(TrFromToBox, {\n        children: /*#__PURE__*/_jsxDEV(Select, {\n          value: chosenLang,\n          onChange: e => setChosenLang(e.target.value),\n          children: langs.map(lang => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: lang,\n            children: [langsText(lang, 0), \" \\u279E \", langsText(lang, 1), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 43\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Textarea, {\n        rows: 4,\n        placeholder: \"Type something to translate\",\n        value: inputText,\n        onChange: e => {\n          getTranslatedWords(chosenLang, e.target.value.split(\" \").join(\"+\"));\n          setInputText(e.target.value);\n          console.log(e.target.value.split(\" \").join(\"+\"));\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Cite, {\n      children: [\"Powered by \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"https://yandex.com/dev/dictionary/\",\n        children: \"Yandex\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Input, \"vYpzKqSPCkThMJDLaDW1dPE1uxM=\");\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["/home/abdullokhodjimatov95/ibs-school/react/lesson-59/yandex-dictionary-master/src/components/Input/index.jsx"],"names":["React","useState","Button","Cite","InputBox","Select","Textarea","TrFromToBox","Input","getTranslatedWords","inputText","setInputText","langs","langToStr","lang","langsText","number","split","chosenLang","setChosenLang","e","target","value","map","join","console","log"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\"\nimport {Button, Cite, InputBox, Select, Textarea, TrFromToBox} from \"./styles\";\nimport {ReactComponent as ArrowRight} from \"../../assets/icons/arrow-right-solid.svg\"\n\nfunction Input({getTranslatedWords}) {\n\n    const [inputText, setInputText] = useState('')\n\n    const langs = [\n        \"ru-ru\", \"ru-en\", \"ru-pl\", \"ru-uk\",\n        \"ru-de\", \"ru-fr\", \"ru-es\", \"ru-it\",\n        \"ru-tr\", \"en-ru\", \"en-en\", \"en-de\",\n        \"en-fr\", \"en-es\", \"en-it\", \"en-tr\",\n        \"pl-ru\", \"uk-ru\", \"de-ru\", \"de-en\",\n        \"fr-ru\", \"fr-en\", \"es-ru\", \"es-en\",\n        \"it-ru\", \"it-en\", \"tr-ru\", \"tr-en\"\n    ]\n\n\n    const langToStr = (lang) => {\n        switch (lang) {\n            case \"ru\":\n                return \"Russian\"\n            case \"en\":\n                return \"English\"\n            case \"pl\":\n                return \"Polandish\"\n            case \"uk\":\n                return \"Ukrainian\"\n            case \"de\":\n                return \"German\"\n            case \"fr\":\n                return \"French\"\n            case \"es\":\n                return \"Spanish\"\n            case \"it\":\n                return \"Italian\"\n            case \"tr\":\n                return \"Turkish\"\n            default:\n                return ''\n\n        }\n    }\n\n    const langsText = (langs, number) => {\n        const lang = langs.split(\"-\")\n        return langToStr(lang[number])\n    }\n\n    const [chosenLang, setChosenLang] = useState(\"en-ru\")\n\n    return (\n        <>\n            <InputBox>\n                <TrFromToBox>\n                    <Select value={chosenLang} onChange={(e) => setChosenLang(e.target.value)}>\n\n                        {\n                            langs.map(\n                                (lang) => <option\n                                    value={lang}>{langsText(lang, 0)} &#10142; {langsText(lang, 1)} </option>\n                            )\n                        }\n\n                    </Select>\n                    {/*<ArrowRight/>*/}\n                </TrFromToBox>\n                <Textarea rows={4}\n                          placeholder={\"Type something to translate\"}\n                          value={inputText}\n                          onChange={(e) => {\n                              getTranslatedWords(chosenLang, e.target.value.split(\" \").join(\"+\"))\n                              setInputText(e.target.value)\n                              console.log(e.target.value.split(\" \").join(\"+\"))\n                          }}\n                />\n                {/* <Button onClick={() => getTranslatedWords(inputText)}>*/}\n                {/*    Translate*/}\n                {/*</Button> */}\n\n            </InputBox>\n            <Cite>Powered by <a href=\"https://yandex.com/dev/dictionary/\">Yandex</a></Cite>\n        </>\n    )\n}\n\nexport default Input"]},"metadata":{},"sourceType":"module"}