{"ast":null,"code":"var _jsxFileName = \"/home/abdullokhodjimatov95/ibs-school/react/lesson-59/homework-59/src/components/TranslateCol/index.jsx\";\nimport React from \"react\";\nimport { Comma, Example, Gen, Mean, MinusSign, Number, Pos, Syn, Tr, TranslateColWrapper, TranslatedWord, TranslateWord, TranslateWordBox, TranslateWordPronunciation } from \"./styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction TranslateCol({\n  translated\n}) {\n  var _translated$def;\n\n  return /*#__PURE__*/_jsxDEV(TranslateColWrapper, {\n    children: translated === null || translated === void 0 ? void 0 : (_translated$def = translated.def) === null || _translated$def === void 0 ? void 0 : _translated$def.map(({\n      text,\n      pos,\n      ts,\n      tr\n    }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(TranslateWordBox, {\n        children: [/*#__PURE__*/_jsxDEV(TranslateWord, {\n          children: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(TranslateWordPronunciation, {\n          children: [\"[\", ts, \"]\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Pos, {\n          children: pos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 25\n      }, this), tr === null || tr === void 0 ? void 0 : tr.map(({\n        text,\n        gen,\n        syn,\n        mean,\n        ex\n      }, trIndex) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(TranslatedWord, {\n          children: [tr.length > 1 && /*#__PURE__*/_jsxDEV(Number, {\n            children: trIndex + 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 41\n          }, this), /*#__PURE__*/_jsxDEV(Tr, {\n            children: [text, gen && /*#__PURE__*/_jsxDEV(Gen, {\n              children: gen\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 49\n            }, this), /*#__PURE__*/_jsxDEV(Comma, {\n              children: syn ? \",\" : ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 37\n          }, this), syn === null || syn === void 0 ? void 0 : syn.map(({\n            text,\n            gen\n          }, synIndex) => /*#__PURE__*/_jsxDEV(Syn, {\n            children: [text, gen && /*#__PURE__*/_jsxDEV(Gen, {\n              children: gen\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(Comma, {\n              children: syn.length - 1 !== synIndex ? \",\" : ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 41\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 33\n        }, this), mean && /*#__PURE__*/_jsxDEV(Mean, {\n          children: [\"(\", mean.map(({\n            text\n          }, meanIndex) => /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [text, mean.length - 1 !== meanIndex && \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 70\n          }, this)), \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 33\n        }, this), ex && /*#__PURE__*/_jsxDEV(Example, {\n          children: ex.map(({\n            text,\n            tr\n          }) => /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [text, /*#__PURE__*/_jsxDEV(MinusSign, {\n              children: \"-\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 45\n            }, this), tr && tr.map(({\n              text\n            }) => /*#__PURE__*/_jsxDEV(\"span\", {\n              children: text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 69\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 41\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true)), /*#__PURE__*/_jsxDEV(Example, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this);\n}\n\n_c = TranslateCol;\nexport default TranslateCol;\n\nvar _c;\n\n$RefreshReg$(_c, \"TranslateCol\");","map":{"version":3,"sources":["/home/abdullokhodjimatov95/ibs-school/react/lesson-59/homework-59/src/components/TranslateCol/index.jsx"],"names":["React","Comma","Example","Gen","Mean","MinusSign","Number","Pos","Syn","Tr","TranslateColWrapper","TranslatedWord","TranslateWord","TranslateWordBox","TranslateWordPronunciation","TranslateCol","translated","def","map","text","pos","ts","tr","gen","syn","mean","ex","trIndex","length","synIndex","meanIndex"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport {\n    Comma,\n    Example, Gen,\n    Mean, MinusSign, Number,\n    Pos, Syn, Tr,\n    TranslateColWrapper,\n    TranslatedWord,\n    TranslateWord,\n    TranslateWordBox,\n    TranslateWordPronunciation\n} from \"./styles\";\n\nfunction TranslateCol({translated}) {\n    return (\n        <TranslateColWrapper>\n            {\n                translated?.def?.map(({text, pos, ts, tr}) =>\n                    <>\n                        <TranslateWordBox>\n                            <TranslateWord>\n                                {text}\n                            </TranslateWord>\n                            <TranslateWordPronunciation>\n                                [{ts}]\n                            </TranslateWordPronunciation>\n                            <Pos>\n                                {pos}\n                            </Pos>\n                        </TranslateWordBox>\n\n                        {tr?.map(({text, gen, syn, mean, ex}, trIndex) =>\n                            <>\n                                <TranslatedWord>\n                                    {tr.length>1 &&\n                                        <Number>\n                                            {trIndex + 1}\n                                        </Number>\n                                    }\n                                    <Tr>\n                                        {text}\n                                        {gen && <Gen>\n                                            {gen}\n                                        </Gen>}\n                                        <Comma>\n                                            {syn ? \",\" : ''}\n                                        </Comma>\n                                    </Tr>\n\n                                    {syn?.map(({text, gen}, synIndex) =>\n                                        <Syn>\n                                            {text}\n                                            {gen &&\n                                            <Gen>\n                                                {gen}\n                                            </Gen>}\n                                            <Comma>\n                                                {syn.length - 1 !== synIndex ? \",\" : ''}\n                                            </Comma>\n                                        </Syn>\n                                    )}\n\n                                </TranslatedWord>\n                                {mean &&\n                                <Mean>\n                                    ({mean.map(({text},meanIndex) => <span>{text}{mean.length-1!==meanIndex && \" \"}</span>)})\n                                </Mean>\n                                }\n\n                                {ex &&\n                                <Example>\n                                    {ex.map(({text,tr}) =>\n                                        <p>\n                                            {text}\n                                            <MinusSign>-</MinusSign>\n                                            {tr && tr.map(({text})=><span>{text}</span>)}\n                                        </p>\n                                    )}\n                                </Example>\n                                }\n\n\n                            </>\n                        )}\n\n                        <Example>\n\n                        </Example>\n                    </>\n                )\n            }\n        </TranslateColWrapper>\n    )\n}\n\nexport default TranslateCol"]},"metadata":{},"sourceType":"module"}